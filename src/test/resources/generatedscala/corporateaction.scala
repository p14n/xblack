// Generated by <a href="http://scalaxb.org/">scalaxb</a>.



case class CorporateActions(CorporateAction: CorporateAction)


case class CorporateAction(CorporateActionEvents: CorporateActionEvents,
  Holding: Holding,
  startDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  typeValue: Option[String] = None,
  description: Option[String] = None,
  currency: Option[String] = None,
  urn: Option[Long] = None,
  status: Option[Status] = None)


case class CorporateActionActivity(oldUnits: Option[Long] = None,
  actionType: Option[String] = None,
  newUnits: Option[Long] = None,
  price: Option[Long] = None,
  resultCurrency: Option[String] = None,
  unknownOutturns: Option[Boolean] = None,
  result: Option[Long] = None,
  actionDescription: Option[String] = None)


case class CorporateActionActivities(CorporateActionActivity: CorporateActionActivity)


case class CorporateActionEvent(CAEventID: CAEventID,
  CorporateActionEventDetails: CorporateActionEventDetails,
  optional: Option[Boolean] = None,
  eventType: Option[String] = None,
  description: Option[String] = None,
  responseDue: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  bookCloseDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  cashDueCurrency: Option[String] = None,
  cashDue: Option[Long] = None)


case class CorporateActionEvents(CorporateActionEvent: CorporateActionEvent)


case class CAEventID(urn: Option[Int] = None,
  sequence: Option[Int] = None)

trait Status

object Status {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Status = value match {
    case "0" => Number0
    case "1" => Number1
    case "2" => Number2
    case "3" => Number3
    case "" => Blank

  }
}

case object Number0 extends Status { override def toString = "0" }
case object Number1 extends Status { override def toString = "1" }
case object Number2 extends Status { override def toString = "2" }
case object Number3 extends Status { override def toString = "3" }
case object Blank extends Status { override def toString = "" }


case class DividentDetails(UnisTrustDetails: UnisTrustDetails,
  dividentType: Option[String] = None,
  posted: Option[Boolean] = None,
  payRate: Option[BigDecimal] = None,
  paymentMarket: Option[BigDecimal] = None,
  taxMarket: Option[BigDecimal] = None,
  agentChargesMarket: Option[BigDecimal] = None,
  agentChargesClient: Option[BigDecimal] = None,
  marketClientRate: Option[BigDecimal] = None,
  paymentClient: Option[BigDecimal] = None,
  taxClient: Option[BigDecimal] = None)


case class UnisTrustDetails(groupOnePayRate: Option[BigDecimal] = None,
  groupOnePayment: Option[BigDecimal] = None,
  groupOneTax: Option[BigDecimal] = None,
  groupTwoPayRate: Option[BigDecimal] = None,
  groupTwoEqualisationRate: Option[BigDecimal] = None,
  groupTwoPayment: Option[BigDecimal] = None,
  groupTwoTax: Option[BigDecimal] = None,
  groupTwoEqualisation: Option[BigDecimal] = None)


case class UnitTrustGroup(payRate: Option[BigDecimal] = None,
  payment: Option[BigDecimal] = None,
  tax: Option[BigDecimal] = None,
  groupType: Option[String] = None)


case class EventNotes(notes: Option[String] = None)


case class CorporateActionOptions(CorporateActionOption: CorporateActionOption)


case class CorporateActionOption(allocation: Option[BigDecimal] = None,
  pricePerShare: Option[BigDecimal] = None,
  cashToPricePerShareRate: Option[Long] = None,
  priceCurrency: Option[String] = None,
  cashDueCurrency: Option[String] = None,
  cashDue: Option[Long] = None,
  description: Option[String] = None,
  optionNumber: Option[Long] = None,
  depot: Option[String] = None,
  claim: Option[Boolean] = None,
  crestAccount: Option[String] = None,
  crestMember: Option[String] = None)


case class CorporateActionEventDetails(DividentDetails: DividentDetails,
  CorporateActionOptions: CorporateActionOptions,
  EventNotes: EventNotes)

