// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
    
/**
usage:
val obj = scalaxb.fromXML[.Foo](node)
val document = scalaxb.toXML[.Foo](obj, "foo", .defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://schemas.jhc.co.uk/domain/account",
    Some("a") -> "http://schemas.jhc.co.uk/domain/account",
    Some("c") -> "http://schemas.jhc.co.uk/domain/common",
    Some("ca") -> "http://schemas.jhc.co.uk/domain/corporateaction",
    Some("cmp") -> "http://schemas.jhc.co.uk/domain/company",
    Some("i") -> "http://schemas.jhc.co.uk/domain/instrument",
    Some("tns0") -> "http://schemas.jhc.co.uk/domain/statement",
    Some("tns1") -> "http://schemas.jhc.co.uk/domain/fx",
    Some("tns2") -> "http://schemas.jhc.co.uk/domain/alert",
    Some("tns3") -> "http://schemas.jhc.co.uk/domain/ccm",
    Some("tns4") -> "http://schemas.jhc.co.uk/domain/custom",
    Some("tns5") -> "http://schemas.jhc.co.uk/domain/individual",
    Some("tns6") -> "http://schemas.jhc.co.uk/domain/internal",
    Some("tns") -> "http://schemas.jhc.co.uk/domain/transaction",
    Some("v") -> "http://schemas.jhc.co.uk/domain/valuation",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val AccountFormat: scalaxb.XMLFormat[Account] = new DefaultAccountFormat {}
  implicit lazy val AccountsFormat: scalaxb.XMLFormat[Accounts] = new DefaultAccountsFormat {}
  implicit lazy val AccountSummaryFormat: scalaxb.XMLFormat[AccountSummary] = new DefaultAccountSummaryFormat {}
  implicit lazy val PortfolioFormat: scalaxb.XMLFormat[Portfolio] = new DefaultPortfolioFormat {}
  implicit lazy val PortfoliosFormat: scalaxb.XMLFormat[Portfolios] = new DefaultPortfoliosFormat {}
  implicit lazy val DefaultBankAccountFormat: scalaxb.XMLFormat[DefaultBankAccount] = new DefaultDefaultBankAccountFormat {}
  implicit lazy val DefaultBankAccountsFormat: scalaxb.XMLFormat[DefaultBankAccounts] = new DefaultDefaultBankAccountsFormat {}
  implicit lazy val AccountRelationshipFormat: scalaxb.XMLFormat[AccountRelationship] = new DefaultAccountRelationshipFormat {}
  implicit lazy val AccountRelationshipsFormat: scalaxb.XMLFormat[AccountRelationships] = new DefaultAccountRelationshipsFormat {}
  implicit lazy val BankAccountFormat: scalaxb.XMLFormat[BankAccount] = new DefaultBankAccountFormat {}
  implicit lazy val BalancesFormat: scalaxb.XMLFormat[Balances] = new DefaultBalancesFormat {}
  implicit lazy val AccountLinkEventFormat: scalaxb.XMLFormat[AccountLinkEvent] = new DefaultAccountLinkEventFormat {}
  implicit lazy val AccountLinkEventsFormat: scalaxb.XMLFormat[AccountLinkEvents] = new DefaultAccountLinkEventsFormat {}
  implicit lazy val DeliveryStatusFormat: scalaxb.XMLFormat[DeliveryStatus] = new DefaultDeliveryStatusFormat {}
  implicit lazy val TriggerFormat: scalaxb.XMLFormat[Trigger] = new DefaultTriggerFormat {}
  implicit lazy val TypeFormat: scalaxb.XMLFormat[Type] = new DefaultTypeFormat {}
  implicit lazy val AlertFormat: scalaxb.XMLFormat[Alert] = new DefaultAlertFormat {}
  implicit lazy val AlertsFormat: scalaxb.XMLFormat[Alerts] = new DefaultAlertsFormat {}
  implicit lazy val CcmDataItemsFormat: scalaxb.XMLFormat[CcmDataItems] = new DefaultCcmDataItemsFormat {}
  implicit lazy val CcmDataItemFormat: scalaxb.XMLFormat[CcmDataItem] = new DefaultCcmDataItemFormat {}
  implicit lazy val CcmUpdateFormat: scalaxb.XMLFormat[CcmUpdate] = new DefaultCcmUpdateFormat {}
  implicit lazy val CcmUpdatesFormat: scalaxb.XMLFormat[CcmUpdates] = new DefaultCcmUpdatesFormat {}
  implicit lazy val CcmActionFormat: scalaxb.XMLFormat[CcmAction] = new DefaultCcmActionFormat {}
  implicit lazy val CcmPageComponentFormat: scalaxb.XMLFormat[CcmPageComponent] = new DefaultCcmPageComponentFormat {}
  implicit lazy val CcmPageComponentsFormat: scalaxb.XMLFormat[CcmPageComponents] = new DefaultCcmPageComponentsFormat {}
  implicit lazy val CcmPageFormat: scalaxb.XMLFormat[CcmPage] = new DefaultCcmPageFormat {}
  implicit lazy val CcmPagesFormat: scalaxb.XMLFormat[CcmPages] = new DefaultCcmPagesFormat {}
  implicit lazy val CcmActionsFormat: scalaxb.XMLFormat[CcmActions] = new DefaultCcmActionsFormat {}
  implicit lazy val CcmTemplatesFormat: scalaxb.XMLFormat[CcmTemplates] = new DefaultCcmTemplatesFormat {}
  implicit lazy val ModificationTypeFormat: scalaxb.XMLFormat[ModificationType] = new DefaultModificationTypeFormat {}
  implicit lazy val EntityLevelFormat: scalaxb.XMLFormat[EntityLevel] = new DefaultEntityLevelFormat {}
  implicit lazy val CcmTemplateFormat: scalaxb.XMLFormat[CcmTemplate] = new DefaultCcmTemplateFormat {}
  implicit lazy val AddressLinesFormat: scalaxb.XMLFormat[AddressLines] = new DefaultAddressLinesFormat {}
  implicit lazy val AddressFormat: scalaxb.XMLFormat[Address] = new DefaultAddressFormat {}
  implicit lazy val PhoneNumberFormat: scalaxb.XMLFormat[PhoneNumber] = new DefaultPhoneNumberFormat {}
  implicit lazy val CountryFormat: scalaxb.XMLFormat[Country] = new DefaultCountryFormat {}
  implicit lazy val CashValueFormat: scalaxb.XMLFormat[CashValue] = new DefaultCashValueFormat {}
  implicit lazy val DateRangeFormat: scalaxb.XMLFormat[DateRange] = new DefaultDateRangeFormat {}
  implicit lazy val EmailAddressFormat: scalaxb.XMLFormat[EmailAddress] = new DefaultEmailAddressFormat {}
  implicit lazy val EmailAddressesFormat: scalaxb.XMLFormat[EmailAddresses] = new DefaultEmailAddressesFormat {}
  implicit lazy val AddressesFormat: scalaxb.XMLFormat[Addresses] = new DefaultAddressesFormat {}
  implicit lazy val PhoneNumbersFormat: scalaxb.XMLFormat[PhoneNumbers] = new DefaultPhoneNumbersFormat {}
  implicit lazy val LinksFormat: scalaxb.XMLFormat[Links] = new DefaultLinksFormat {}
  implicit lazy val ParametersFormat: scalaxb.XMLFormat[Parameters] = new DefaultParametersFormat {}
  implicit lazy val ParameterFormat: scalaxb.XMLFormat[Parameter] = new DefaultParameterFormat {}
  implicit lazy val LinkFormat: scalaxb.XMLFormat[Link] = new DefaultLinkFormat {}
  implicit lazy val ProductTypeFormat: scalaxb.XMLFormat[ProductType] = new DefaultProductTypeFormat {}
  implicit lazy val RoleFormat: scalaxb.XMLFormat[Role] = new DefaultRoleFormat {}
  implicit lazy val ValuationFormatFormat: scalaxb.XMLFormat[ValuationFormat] = new DefaultValuationFormatFormat {}
  implicit lazy val InvestmentObjectiveFormat: scalaxb.XMLFormat[InvestmentObjective] = new DefaultInvestmentObjectiveFormat {}
  implicit lazy val InstrumentHeadingFormat: scalaxb.XMLFormat[InstrumentHeading] = new DefaultInstrumentHeadingFormat {}
  implicit lazy val PriceFormat: scalaxb.XMLFormat[Price] = new DefaultPriceFormat {}
  implicit lazy val DeliveryTypeFormat: scalaxb.XMLFormat[DeliveryType] = new DefaultDeliveryTypeFormat {}
  implicit lazy val ErrorFormat: scalaxb.XMLFormat[Error] = new DefaultErrorFormat {}
  implicit lazy val ErrorsFormat: scalaxb.XMLFormat[Errors] = new DefaultErrorsFormat {}
  implicit lazy val CompanyFormat: scalaxb.XMLFormat[Company] = new DefaultCompanyFormat {}
  implicit lazy val CompanyRelationshipFormat: scalaxb.XMLFormat[CompanyRelationship] = new DefaultCompanyRelationshipFormat {}
  implicit lazy val CompanyRelationshipsFormat: scalaxb.XMLFormat[CompanyRelationships] = new DefaultCompanyRelationshipsFormat {}
  implicit lazy val CorporateActionsFormat: scalaxb.XMLFormat[CorporateActions] = new DefaultCorporateActionsFormat {}
  implicit lazy val CorporateActionFormat: scalaxb.XMLFormat[CorporateAction] = new DefaultCorporateActionFormat {}
  implicit lazy val CorporateActionActivityFormat: scalaxb.XMLFormat[CorporateActionActivity] = new DefaultCorporateActionActivityFormat {}
  implicit lazy val CorporateActionActivitiesFormat: scalaxb.XMLFormat[CorporateActionActivities] = new DefaultCorporateActionActivitiesFormat {}
  implicit lazy val CorporateActionEventFormat: scalaxb.XMLFormat[CorporateActionEvent] = new DefaultCorporateActionEventFormat {}
  implicit lazy val CorporateActionEventsFormat: scalaxb.XMLFormat[CorporateActionEvents] = new DefaultCorporateActionEventsFormat {}
  implicit lazy val CAEventIDFormat: scalaxb.XMLFormat[CAEventID] = new DefaultCAEventIDFormat {}
  implicit lazy val StatusFormat: scalaxb.XMLFormat[Status] = new DefaultStatusFormat {}
  implicit lazy val DividentDetailsFormat: scalaxb.XMLFormat[DividentDetails] = new DefaultDividentDetailsFormat {}
  implicit lazy val UnisTrustDetailsFormat: scalaxb.XMLFormat[UnisTrustDetails] = new DefaultUnisTrustDetailsFormat {}
  implicit lazy val UnitTrustGroupFormat: scalaxb.XMLFormat[UnitTrustGroup] = new DefaultUnitTrustGroupFormat {}
  implicit lazy val EventNotesFormat: scalaxb.XMLFormat[EventNotes] = new DefaultEventNotesFormat {}
  implicit lazy val CorporateActionOptionsFormat: scalaxb.XMLFormat[CorporateActionOptions] = new DefaultCorporateActionOptionsFormat {}
  implicit lazy val CorporateActionOptionFormat: scalaxb.XMLFormat[CorporateActionOption] = new DefaultCorporateActionOptionFormat {}
  implicit lazy val CorporateActionEventDetailsFormat: scalaxb.XMLFormat[CorporateActionEventDetails] = new DefaultCorporateActionEventDetailsFormat {}
  implicit lazy val DecimalFormat: scalaxb.XMLFormat[Decimal] = new DefaultDecimalFormat {}
  implicit lazy val FxRateFormat: scalaxb.XMLFormat[FxRate] = new DefaultFxRateFormat {}
  implicit lazy val FxTableFormat: scalaxb.XMLFormat[FxTable] = new DefaultFxTableFormat {}
  implicit lazy val MiddleNamesFormat: scalaxb.XMLFormat[MiddleNames] = new DefaultMiddleNamesFormat {}
  implicit lazy val MaritalStatusFormat: scalaxb.XMLFormat[MaritalStatus] = new DefaultMaritalStatusFormat {}
  implicit lazy val IndividualFormat: scalaxb.XMLFormat[Individual] = new DefaultIndividualFormat {}
  implicit lazy val IndividualsFormat: scalaxb.XMLFormat[Individuals] = new DefaultIndividualsFormat {}
  implicit lazy val IndividualRelationshipFormat: scalaxb.XMLFormat[IndividualRelationship] = new DefaultIndividualRelationshipFormat {}
  implicit lazy val IndividualRelationshipsFormat: scalaxb.XMLFormat[IndividualRelationships] = new DefaultIndividualRelationshipsFormat {}
  implicit lazy val InstrumentClassificationFormat: scalaxb.XMLFormat[InstrumentClassification] = new DefaultInstrumentClassificationFormat {}
  implicit lazy val InstrumentApplicabilityFormat: scalaxb.XMLFormat[InstrumentApplicability] = new DefaultInstrumentApplicabilityFormat {}
  implicit lazy val InstrumentPropertiesFormat: scalaxb.XMLFormat[InstrumentProperties] = new DefaultInstrumentPropertiesFormat {}
  implicit lazy val InstrumentFormat: scalaxb.XMLFormat[Instrument] = new DefaultInstrumentFormat {}
  implicit lazy val InstrumentsFormat: scalaxb.XMLFormat[Instruments] = new DefaultInstrumentsFormat {}
  implicit lazy val ContainerFormat: scalaxb.XMLFormat[Container] = new DefaultContainerFormat {}
  implicit lazy val ApiMessageFormat: scalaxb.XMLFormat[ApiMessage] = new DefaultApiMessageFormat {}
  implicit lazy val BoSFormat: scalaxb.XMLFormat[BoS] = new DefaultBoSFormat {}
  implicit lazy val StatementEntryFormat: scalaxb.XMLFormat[StatementEntry] = new DefaultStatementEntryFormat {}
  implicit lazy val StatementFormat: scalaxb.XMLFormat[Statement] = new DefaultStatementFormat {}
  implicit lazy val TransactionTypeFormat: scalaxb.XMLFormat[TransactionType] = new DefaultTransactionTypeFormat {}
  implicit lazy val TransactionFormat: scalaxb.XMLFormat[Transaction] = new DefaultTransactionFormat {}
  implicit lazy val ContractIdFormat: scalaxb.XMLFormat[ContractId] = new DefaultContractIdFormat {}
  implicit lazy val TransactionSourceIdFormat: scalaxb.XMLFormat[TransactionSourceId] = new DefaultTransactionSourceIdFormat {}
  implicit lazy val TransactionsFormat: scalaxb.XMLFormat[Transactions] = new DefaultTransactionsFormat {}
  implicit lazy val HoldingFormat: scalaxb.XMLFormat[Holding] = new DefaultHoldingFormat {}
  implicit lazy val HoldingsFormat: scalaxb.XMLFormat[Holdings] = new DefaultHoldingsFormat {}

  trait DefaultAccountFormat extends scalaxb.ElemNameParser[Account] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Account] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Product")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "DefaultBankAccounts")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Balances")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Account(scalaxb.fromXML[ProductType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[DefaultBankAccounts](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Balances](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@code").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}serviceLevel").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dealingStatus").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}baseCcy").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}settCcy").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}valCcy").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Account, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.code foreach { x => attr = scala.xml.Attribute(null, "code", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      __obj.cserviceLevel foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "serviceLevel", x.toString, attr) }
      __obj.dealingStatus foreach { x => attr = scala.xml.Attribute(null, "dealingStatus", x.toString, attr) }
      __obj.cbaseCcy foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "baseCcy", x.toString, attr) }
      __obj.csettCcy foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "settCcy", x.toString, attr) }
      __obj.cvalCcy foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "valCcy", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Account, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ProductType](__obj.Product, Some("http://schemas.jhc.co.uk/domain/common"), Some("Product"), __scope, false),
        __obj.DefaultBankAccounts map { scalaxb.toXML[DefaultBankAccounts](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("DefaultBankAccounts"), __scope, false) } getOrElse {Nil},
        __obj.Balances map { scalaxb.toXML[Balances](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("Balances"), __scope, false) } getOrElse {Nil},
        __obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultAccountsFormat extends scalaxb.ElemNameParser[Accounts] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Accounts] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Account")) ^^
      { case p1 =>
      Accounts(p1.toSeq map { scalaxb.fromXML[Account](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Accounts, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Account flatMap { scalaxb.toXML[Account](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("Account"), __scope, false) })

  }

  trait DefaultAccountSummaryFormat extends scalaxb.ElemNameParser[AccountSummary] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AccountSummary] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Accounts")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "AvailableToWithdraw")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "HoldingValuation")) ^^
      { case p1 ~ p2 ~ p3 =>
      AccountSummary(scalaxb.fromXML[Accounts](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CashValue](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CashValue](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: AccountSummary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Accounts](__obj.Accounts, Some("http://schemas.jhc.co.uk/domain/account"), Some("Accounts"), __scope, false),
        scalaxb.toXML[CashValue](__obj.AvailableToWithdraw, Some("http://schemas.jhc.co.uk/domain/account"), Some("AvailableToWithdraw"), __scope, false),
        scalaxb.toXML[CashValue](__obj.HoldingValuation, Some("http://schemas.jhc.co.uk/domain/account"), Some("HoldingValuation"), __scope, false))

  }

  trait DefaultPortfolioFormat extends scalaxb.ElemNameParser[Portfolio] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Portfolio] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "ValuationFormat")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "InvestmentObjective")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Description")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Accounts")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Portfolio(scalaxb.fromXML[ValuationFormat](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[InvestmentObjective](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Accounts](p4, scalaxb.ElemName(node) :: stack),
        (node \ "@{http://schemas.jhc.co.uk/domain/common}valCcy").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}serviceLevel").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@code").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Portfolio, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.cvalCcy foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "valCcy", x.toString, attr) }
      __obj.cserviceLevel foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "serviceLevel", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      __obj.code foreach { x => attr = scala.xml.Attribute(null, "code", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Portfolio, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ValuationFormat](__obj.ValuationFormat, Some("http://schemas.jhc.co.uk/domain/common"), Some("ValuationFormat"), __scope, false),
        scalaxb.toXML[InvestmentObjective](__obj.InvestmentObjective, Some("http://schemas.jhc.co.uk/domain/common"), Some("InvestmentObjective"), __scope, false),
        scalaxb.toXML[String](__obj.Description, Some("http://schemas.jhc.co.uk/domain/account"), Some("Description"), __scope, false),
        scalaxb.toXML[Accounts](__obj.Accounts, Some("http://schemas.jhc.co.uk/domain/account"), Some("Accounts"), __scope, false))

  }

  trait DefaultPortfoliosFormat extends scalaxb.ElemNameParser[Portfolios] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Portfolios] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Portfolio")) ^^
      { case p1 =>
      Portfolios(p1.toSeq map { scalaxb.fromXML[Portfolio](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Portfolios, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Portfolio flatMap { scalaxb.toXML[Portfolio](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("Portfolio"), __scope, false) })

  }

  trait DefaultDefaultBankAccountFormat extends scalaxb.ElemNameParser[DefaultBankAccount] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DefaultBankAccount] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "BankAccount")) ^^
      { case p1 =>
      DefaultBankAccount(scalaxb.fromXML[BankAccount](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@defaultType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: DefaultBankAccount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.defaultType foreach { x => attr = scala.xml.Attribute(null, "defaultType", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: DefaultBankAccount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[BankAccount](__obj.BankAccount, Some("http://schemas.jhc.co.uk/domain/account"), Some("BankAccount"), __scope, false))

  }

  trait DefaultDefaultBankAccountsFormat extends scalaxb.ElemNameParser[DefaultBankAccounts] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    override def typeName: Option[String] = Some("DefaultBankAccounts")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DefaultBankAccounts] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "DefaultBankAccount")) ^^
      { case p1 =>
      DefaultBankAccounts(p1.toSeq map { scalaxb.fromXML[DefaultBankAccount](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: DefaultBankAccounts, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DefaultBankAccount flatMap { scalaxb.toXML[DefaultBankAccount](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("DefaultBankAccount"), __scope, false) })

  }

  trait DefaultAccountRelationshipFormat extends scalaxb.ElemNameParser[AccountRelationship] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    override def typeName: Option[String] = Some("AccountRelationship")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AccountRelationship] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Account")) ^^
      { case p1 =>
      AccountRelationship(scalaxb.fromXML[Account](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@{http://schemas.jhc.co.uk/domain/common}roleId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: AccountRelationship, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.croleId foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "roleId", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: AccountRelationship, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Account](__obj.Account, Some("http://schemas.jhc.co.uk/domain/account"), Some("Account"), __scope, false))

  }

  trait DefaultAccountRelationshipsFormat extends scalaxb.ElemNameParser[AccountRelationships] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    override def typeName: Option[String] = Some("AccountRelationships")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AccountRelationships] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "AccountRelationship")) ^^
      { case p1 =>
      AccountRelationships(p1.toSeq map { scalaxb.fromXML[AccountRelationship](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: AccountRelationships, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.AccountRelationship flatMap { scalaxb.toXML[AccountRelationship](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("AccountRelationship"), __scope, false) })

  }

  trait DefaultBankAccountFormat extends scalaxb.ElemNameParser[BankAccount] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BankAccount] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "Balances")) ^^
      { case p1 =>
      BankAccount(scalaxb.fromXML[Balances](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@country").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@iban").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sort").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ukAccount").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@roll").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: BankAccount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.country foreach { x => attr = scala.xml.Attribute(null, "country", x.toString, attr) }
      __obj.iban foreach { x => attr = scala.xml.Attribute(null, "iban", x.toString, attr) }
      __obj.sort foreach { x => attr = scala.xml.Attribute(null, "sort", x.toString, attr) }
      __obj.ukAccount foreach { x => attr = scala.xml.Attribute(null, "ukAccount", x.toString, attr) }
      __obj.roll foreach { x => attr = scala.xml.Attribute(null, "roll", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: BankAccount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Balances](__obj.Balances, Some("http://schemas.jhc.co.uk/domain/account"), Some("Balances"), __scope, false))

  }

  trait DefaultBalancesFormat extends scalaxb.ElemNameParser[Balances] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Balances] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "AvailableToWithdraw")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "AvailableToInvest")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "HoldingValuation")) ^^
      { case p1 ~ p2 ~ p3 =>
      Balances(scalaxb.fromXML[CashValue](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CashValue](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CashValue](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: Balances, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[CashValue](__obj.AvailableToWithdraw, Some("http://schemas.jhc.co.uk/domain/account"), Some("AvailableToWithdraw"), __scope, false),
        scalaxb.toXML[CashValue](__obj.AvailableToInvest, Some("http://schemas.jhc.co.uk/domain/account"), Some("AvailableToInvest"), __scope, false),
        scalaxb.toXML[CashValue](__obj.HoldingValuation, Some("http://schemas.jhc.co.uk/domain/account"), Some("HoldingValuation"), __scope, false))

  }

  trait DefaultAccountLinkEventFormat extends scalaxb.XMLFormat[AccountLinkEvent] with scalaxb.CanWriteChildNodes[AccountLinkEvent] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AccountLinkEvent] = seq match {
      case node: scala.xml.Node => Right(AccountLinkEvent((node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@oldUecode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@newUecode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@accountNumber").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@username").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@changeType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@performed").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@ownershipConfirmed").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@authorisationChecked").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@warningsOverridden").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: AccountLinkEvent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.oldUecode foreach { x => attr = scala.xml.Attribute(null, "oldUecode", x.toString, attr) }
      __obj.newUecode foreach { x => attr = scala.xml.Attribute(null, "newUecode", x.toString, attr) }
      __obj.accountNumber foreach { x => attr = scala.xml.Attribute(null, "accountNumber", x.toString, attr) }
      __obj.username foreach { x => attr = scala.xml.Attribute(null, "username", x.toString, attr) }
      __obj.changeType foreach { x => attr = scala.xml.Attribute(null, "changeType", x.toString, attr) }
      __obj.performed foreach { x => attr = scala.xml.Attribute(null, "performed", x.toString, attr) }
      __obj.ownershipConfirmed foreach { x => attr = scala.xml.Attribute(null, "ownershipConfirmed", x.toString, attr) }
      __obj.authorisationChecked foreach { x => attr = scala.xml.Attribute(null, "authorisationChecked", x.toString, attr) }
      __obj.warningsOverridden foreach { x => attr = scala.xml.Attribute(null, "warningsOverridden", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: AccountLinkEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultAccountLinkEventsFormat extends scalaxb.ElemNameParser[AccountLinkEvents] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/account")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AccountLinkEvents] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/account"), "AccountLinkEvent")) ^^
      { case p1 =>
      AccountLinkEvents(p1.toSeq map { scalaxb.fromXML[AccountLinkEvent](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: AccountLinkEvents, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.AccountLinkEvent flatMap { scalaxb.toXML[AccountLinkEvent](_, Some("http://schemas.jhc.co.uk/domain/account"), Some("AccountLinkEvent"), __scope, false) })

  }

  def buildDeliveryStatusFormat = new DefaultDeliveryStatusFormat {}
  trait DefaultDeliveryStatusFormat extends scalaxb.XMLFormat[DeliveryStatus] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/alert")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeliveryStatus] = seq match {
      case elem: scala.xml.Elem => Right(DeliveryStatus.fromString(elem.text, elem.scope))
      case _ => Right(DeliveryStatus.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DeliveryStatus, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildTriggerFormat = new DefaultTriggerFormat {}
  trait DefaultTriggerFormat extends scalaxb.XMLFormat[Trigger] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/alert")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Trigger] = seq match {
      case elem: scala.xml.Elem => Right(Trigger.fromString(elem.text, elem.scope))
      case _ => Right(Trigger.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: Trigger, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildTypeFormat = new DefaultTypeFormat {}
  trait DefaultTypeFormat extends scalaxb.XMLFormat[Type] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/alert")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Type] = seq match {
      case elem: scala.xml.Elem => Right(Type.fromString(elem.text, elem.scope))
      case _ => Right(Type.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: Type, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultAlertFormat extends scalaxb.ElemNameParser[Alert] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/alert")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Alert] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "InstrumentHeading")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "alertPrice")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "originalPrice")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "livePrice")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "DeliveryType")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "DeliveryStatus")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "Trigger")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "Type")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      Alert(scalaxb.fromXML[InstrumentHeading](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Price](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Price](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Price](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[DeliveryType](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[DeliveryStatus](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Trigger](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Type](p8, scalaxb.ElemName(node) :: stack),
        (node \ "@id").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@upPrice"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@downPrice"), scalaxb.ElemName(node) :: stack),
        (node \ "@{http://schemas.jhc.co.uk/domain/common}currency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dateCreated").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dateChanged").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dateTriggered").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@closeMidPrice").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@priceDifference").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@priceDifferencePercentage").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@activated").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@checkUniqueAlert").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Alert, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      attr = scala.xml.Attribute(null, "upPrice", __obj.upPrice.toString, attr)
      attr = scala.xml.Attribute(null, "downPrice", __obj.downPrice.toString, attr)
      __obj.ccurrency foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "currency", x.toString, attr) }
      __obj.dateCreated foreach { x => attr = scala.xml.Attribute(null, "dateCreated", x.toString, attr) }
      __obj.dateChanged foreach { x => attr = scala.xml.Attribute(null, "dateChanged", x.toString, attr) }
      __obj.dateTriggered foreach { x => attr = scala.xml.Attribute(null, "dateTriggered", x.toString, attr) }
      __obj.closeMidPrice foreach { x => attr = scala.xml.Attribute(null, "closeMidPrice", x.toString, attr) }
      __obj.priceDifference foreach { x => attr = scala.xml.Attribute(null, "priceDifference", x.toString, attr) }
      __obj.priceDifferencePercentage foreach { x => attr = scala.xml.Attribute(null, "priceDifferencePercentage", x.toString, attr) }
      __obj.activated foreach { x => attr = scala.xml.Attribute(null, "activated", x.toString, attr) }
      __obj.checkUniqueAlert foreach { x => attr = scala.xml.Attribute(null, "checkUniqueAlert", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Alert, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[InstrumentHeading](__obj.InstrumentHeading, Some("http://schemas.jhc.co.uk/domain/common"), Some("InstrumentHeading"), __scope, false),
        scalaxb.toXML[Price](__obj.alertPrice, Some("http://schemas.jhc.co.uk/domain/alert"), Some("alertPrice"), __scope, false),
        __obj.originalPrice map { scalaxb.toXML[Price](_, Some("http://schemas.jhc.co.uk/domain/alert"), Some("originalPrice"), __scope, false) } getOrElse {Nil},
        __obj.livePrice map { scalaxb.toXML[Price](_, Some("http://schemas.jhc.co.uk/domain/alert"), Some("livePrice"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[DeliveryType](__obj.DeliveryType, Some("http://schemas.jhc.co.uk/domain/common"), Some("DeliveryType"), __scope, false),
        scalaxb.toXML[DeliveryStatus](__obj.DeliveryStatus, Some("http://schemas.jhc.co.uk/domain/alert"), Some("DeliveryStatus"), __scope, false),
        scalaxb.toXML[Trigger](__obj.Trigger, Some("http://schemas.jhc.co.uk/domain/alert"), Some("Trigger"), __scope, false),
        scalaxb.toXML[Type](__obj.Type, Some("http://schemas.jhc.co.uk/domain/alert"), Some("Type"), __scope, false))

  }

  trait DefaultAlertsFormat extends scalaxb.ElemNameParser[Alerts] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/alert")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Alerts] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/alert"), "Alert")) ^^
      { case p1 =>
      Alerts(p1.toSeq map { scalaxb.fromXML[Alert](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Alerts, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Alert flatMap { scalaxb.toXML[Alert](_, Some("http://schemas.jhc.co.uk/domain/alert"), Some("Alert"), __scope, false) })

  }

  trait DefaultCcmDataItemsFormat extends scalaxb.ElemNameParser[CcmDataItems] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmDataItems] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmDataItem")) ^^
      { case p1 =>
      CcmDataItems(p1.toSeq map { scalaxb.fromXML[CcmDataItem](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: CcmDataItems, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmDataItem flatMap { scalaxb.toXML[CcmDataItem](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmDataItem"), __scope, false) })

  }

  trait DefaultCcmDataItemFormat extends scalaxb.XMLFormat[CcmDataItem] with scalaxb.CanWriteChildNodes[CcmDataItem] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CcmDataItem] = seq match {
      case node: scala.xml.Node => Right(CcmDataItem((node \ "@componentId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@readOnly").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@before").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@after").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@errorCode").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@errorMessage").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: CcmDataItem, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.componentId foreach { x => attr = scala.xml.Attribute(null, "componentId", x.toString, attr) }
      __obj.readOnly foreach { x => attr = scala.xml.Attribute(null, "readOnly", x.toString, attr) }
      __obj.before foreach { x => attr = scala.xml.Attribute(null, "before", x.toString, attr) }
      __obj.after foreach { x => attr = scala.xml.Attribute(null, "after", x.toString, attr) }
      __obj.errorCode foreach { x => attr = scala.xml.Attribute(null, "errorCode", x.toString, attr) }
      __obj.errorMessage foreach { x => attr = scala.xml.Attribute(null, "errorMessage", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmDataItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultCcmUpdateFormat extends scalaxb.ElemNameParser[CcmUpdate] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmUpdate] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ^^
      { case p1 =>
      CcmUpdate(p1.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        (node \ "@status").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@uecode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@accountNumber").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@failureReason").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CcmUpdate, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      __obj.uecode foreach { x => attr = scala.xml.Attribute(null, "uecode", x.toString, attr) }
      __obj.accountNumber foreach { x => attr = scala.xml.Attribute(null, "accountNumber", x.toString, attr) }
      __obj.failureReason foreach { x => attr = scala.xml.Attribute(null, "failureReason", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmUpdate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCcmUpdatesFormat extends scalaxb.ElemNameParser[CcmUpdates] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmUpdates] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmUpdate")) ^^
      { case p1 =>
      CcmUpdates(p1.toSeq map { scalaxb.fromXML[CcmUpdate](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: CcmUpdates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmUpdate flatMap { scalaxb.toXML[CcmUpdate](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmUpdate"), __scope, false) })

  }

  trait DefaultCcmActionFormat extends scalaxb.ElemNameParser[CcmAction] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmAction] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmUpdates")) ^^
      { case p1 ~ p2 =>
      CcmAction(p1.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[CcmUpdates](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        (node \ "@status").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@username").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@uecode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@performed").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@failureReason").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CcmAction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      __obj.username foreach { x => attr = scala.xml.Attribute(null, "username", x.toString, attr) }
      __obj.uecode foreach { x => attr = scala.xml.Attribute(null, "uecode", x.toString, attr) }
      __obj.performed foreach { x => attr = scala.xml.Attribute(null, "performed", x.toString, attr) }
      __obj.failureReason foreach { x => attr = scala.xml.Attribute(null, "failureReason", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmAction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil},
        __obj.CcmUpdates map { scalaxb.toXML[CcmUpdates](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmUpdates"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCcmPageComponentFormat extends scalaxb.ElemNameParser[CcmPageComponent] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmPageComponent] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmDataItem")) ^^
      { case p1 =>
      CcmPageComponent(p1.headOption map { scalaxb.fromXML[CcmDataItem](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@label").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@length").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@defaultValue").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@mandatory").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@text").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@numeric").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@displayType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CcmPageComponent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.label foreach { x => attr = scala.xml.Attribute(null, "label", x.toString, attr) }
      __obj.length foreach { x => attr = scala.xml.Attribute(null, "length", x.toString, attr) }
      __obj.defaultValue foreach { x => attr = scala.xml.Attribute(null, "defaultValue", x.toString, attr) }
      __obj.mandatory foreach { x => attr = scala.xml.Attribute(null, "mandatory", x.toString, attr) }
      __obj.text foreach { x => attr = scala.xml.Attribute(null, "text", x.toString, attr) }
      __obj.numeric foreach { x => attr = scala.xml.Attribute(null, "numeric", x.toString, attr) }
      __obj.displayType foreach { x => attr = scala.xml.Attribute(null, "displayType", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmPageComponent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmDataItem map { scalaxb.toXML[CcmDataItem](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmDataItem"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCcmPageComponentsFormat extends scalaxb.ElemNameParser[CcmPageComponents] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmPageComponents] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmPageComponent")) ^^
      { case p1 =>
      CcmPageComponents(p1.toSeq map { scalaxb.fromXML[CcmPageComponent](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: CcmPageComponents, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmPageComponent flatMap { scalaxb.toXML[CcmPageComponent](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmPageComponent"), __scope, false) })

  }

  trait DefaultCcmPageFormat extends scalaxb.ElemNameParser[CcmPage] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmPage] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmPageComponents")) ^^
      { case p1 ~ p2 =>
      CcmPage(p1.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CcmPageComponents](p2, scalaxb.ElemName(node) :: stack),
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CcmPage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmPage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CcmPageComponents](__obj.CcmPageComponents, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmPageComponents"), __scope, false))

  }

  trait DefaultCcmPagesFormat extends scalaxb.ElemNameParser[CcmPages] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmPages] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmPage")) ^^
      { case p1 =>
      CcmPages(p1.toSeq map { scalaxb.fromXML[CcmPage](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@templateId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CcmPages, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.templateId foreach { x => attr = scala.xml.Attribute(null, "templateId", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmPages, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmPage flatMap { scalaxb.toXML[CcmPage](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmPage"), __scope, false) })

  }

  trait DefaultCcmActionsFormat extends scalaxb.ElemNameParser[CcmActions] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmActions] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmAction")) ^^
      { case p1 =>
      CcmActions(p1.toSeq map { scalaxb.fromXML[CcmAction](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: CcmActions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmAction flatMap { scalaxb.toXML[CcmAction](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmAction"), __scope, false) })

  }

  trait DefaultCcmTemplatesFormat extends scalaxb.ElemNameParser[CcmTemplates] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmTemplates] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmTemplate")) ^^
      { case p1 =>
      CcmTemplates(p1.toSeq map { scalaxb.fromXML[CcmTemplate](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: CcmTemplates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CcmTemplate flatMap { scalaxb.toXML[CcmTemplate](_, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmTemplate"), __scope, false) })

  }

  def buildModificationTypeFormat = new DefaultModificationTypeFormat {}
  trait DefaultModificationTypeFormat extends scalaxb.XMLFormat[ModificationType] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ModificationType] = seq match {
      case elem: scala.xml.Elem => Right(ModificationType.fromString(elem.text, elem.scope))
      case _ => Right(ModificationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ModificationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildEntityLevelFormat = new DefaultEntityLevelFormat {}
  trait DefaultEntityLevelFormat extends scalaxb.XMLFormat[EntityLevel] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EntityLevel] = seq match {
      case elem: scala.xml.Elem => Right(EntityLevel.fromString(elem.text, elem.scope))
      case _ => Right(EntityLevel.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: EntityLevel, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultCcmTemplateFormat extends scalaxb.ElemNameParser[CcmTemplate] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/ccm")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CcmTemplate] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/ccm"), "CcmPages")) ^^
      { case p1 ~ p2 =>
      CcmTemplate(p1.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[CcmPages](p2, scalaxb.ElemName(node) :: stack),
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@personType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@accountType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@numberOfPages").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@modificationType").headOption map { scalaxb.fromXML[ModificationType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@entityLevel").headOption map { scalaxb.fromXML[EntityLevel](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CcmTemplate, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      __obj.personType foreach { x => attr = scala.xml.Attribute(null, "personType", x.toString, attr) }
      __obj.accountType foreach { x => attr = scala.xml.Attribute(null, "accountType", x.toString, attr) }
      __obj.numberOfPages foreach { x => attr = scala.xml.Attribute(null, "numberOfPages", x.toString, attr) }
      __obj.modificationType foreach { x => attr = scala.xml.Attribute(null, "modificationType", x.toString, attr) }
      __obj.entityLevel foreach { x => attr = scala.xml.Attribute(null, "entityLevel", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CcmTemplate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[CcmPages](__obj.CcmPages, Some("http://schemas.jhc.co.uk/domain/ccm"), Some("CcmPages"), __scope, false))

  }

  trait DefaultAddressLinesFormat extends scalaxb.ElemNameParser[AddressLines] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AddressLines] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Line")) ^^
      { case p1 =>
      AddressLines(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: AddressLines, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Line flatMap { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Line"), __scope, false) })

  }

  trait DefaultAddressFormat extends scalaxb.ElemNameParser[Address] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Address] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "AddressLines")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "City")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "PostCode")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Country")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Validity")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      Address(p1.headOption map { scalaxb.fromXML[AddressLines](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Country](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[DateRange](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isPrimary").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@yearsAtAddress").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Address, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.isPrimary foreach { x => attr = scala.xml.Attribute(null, "isPrimary", x.toString, attr) }
      __obj.yearsAtAddress foreach { x => attr = scala.xml.Attribute(null, "yearsAtAddress", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Address, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AddressLines map { scalaxb.toXML[AddressLines](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("AddressLines"), __scope, false) } getOrElse {Nil},
        __obj.City map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.PostCode map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("PostCode"), __scope, false) } getOrElse {Nil},
        __obj.Country map { scalaxb.toXML[Country](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Country"), __scope, false) } getOrElse {Nil},
        __obj.Validity map { scalaxb.toXML[DateRange](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Validity"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultPhoneNumberFormat extends scalaxb.ElemNameParser[PhoneNumber] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PhoneNumber] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Validity")) ^^
      { case p1 =>
      PhoneNumber(p1.headOption map { scalaxb.fromXML[DateRange](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@country"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@number"), scalaxb.ElemName(node) :: stack),
        (node \ "@extension").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isPrimary").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: PhoneNumber, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr = scala.xml.Attribute(null, "country", __obj.country.toString, attr)
      attr = scala.xml.Attribute(null, "number", __obj.number.toString, attr)
      __obj.extension foreach { x => attr = scala.xml.Attribute(null, "extension", x.toString, attr) }
      __obj.isPrimary foreach { x => attr = scala.xml.Attribute(null, "isPrimary", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: PhoneNumber, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Validity map { scalaxb.toXML[DateRange](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Validity"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCountryFormat extends scalaxb.ElemNameParser[Country] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    override def typeName: Option[String] = Some("Country")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Country] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Description")) ^^
      { case p1 =>
      Country(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@iso3").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@iso2").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Country, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.iso3 foreach { x => attr = scala.xml.Attribute(null, "iso3", x.toString, attr) }
      __obj.iso2 foreach { x => attr = scala.xml.Attribute(null, "iso2", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Country, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Description map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCashValueFormat extends scalaxb.XMLFormat[CashValue] with scalaxb.CanWriteChildNodes[CashValue] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CashValue] = seq match {
      case node: scala.xml.Node => Right(CashValue(scalaxb.fromXML[String]((node \ "@currency"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@amount"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: CashValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "currency", __obj.currency.toString, attr)
      attr = scala.xml.Attribute(null, "amount", __obj.amount.toString, attr)
      attr
    }

    def writesChildNodes(__obj: CashValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDateRangeFormat extends scalaxb.XMLFormat[DateRange] with scalaxb.CanWriteChildNodes[DateRange] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DateRange] = seq match {
      case node: scala.xml.Node => Right(DateRange(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar]((node \ "@from"), scalaxb.ElemName(node) :: stack),
        (node \ "@to").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: DateRange, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "from", __obj.from.toString, attr)
      __obj.to foreach { x => attr = scala.xml.Attribute(null, "to", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: DateRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultEmailAddressFormat extends scalaxb.XMLFormat[EmailAddress] with scalaxb.CanWriteChildNodes[EmailAddress] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EmailAddress] = seq match {
      case node: scala.xml.Node => Right(EmailAddress(scalaxb.fromXML[String]((node \ "@address"), scalaxb.ElemName(node) :: stack),
        (node \ "@label").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: EmailAddress, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "address", __obj.address.toString, attr)
      __obj.label foreach { x => attr = scala.xml.Attribute(null, "label", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: EmailAddress, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultEmailAddressesFormat extends scalaxb.ElemNameParser[EmailAddresses] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[EmailAddresses] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "EmailAddress")) ^^
      { case p1 =>
      EmailAddresses(p1.toSeq map { scalaxb.fromXML[EmailAddress](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: EmailAddresses, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EmailAddress flatMap { scalaxb.toXML[EmailAddress](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("EmailAddress"), __scope, false) })

  }

  trait DefaultAddressesFormat extends scalaxb.ElemNameParser[Addresses] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Addresses] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Address")) ^^
      { case p1 =>
      Addresses(p1.toSeq map { scalaxb.fromXML[Address](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Addresses, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Address flatMap { scalaxb.toXML[Address](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Address"), __scope, false) })

  }

  trait DefaultPhoneNumbersFormat extends scalaxb.ElemNameParser[PhoneNumbers] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[PhoneNumbers] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "PhoneNumber")) ^^
      { case p1 =>
      PhoneNumbers(p1.toSeq map { scalaxb.fromXML[PhoneNumber](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: PhoneNumbers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PhoneNumber flatMap { scalaxb.toXML[PhoneNumber](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("PhoneNumber"), __scope, false) })

  }

  trait DefaultLinksFormat extends scalaxb.ElemNameParser[Links] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Links] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Link")) ^^
      { case p1 =>
      Links(p1.toSeq map { scalaxb.fromXML[Link](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Links, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Link flatMap { scalaxb.toXML[Link](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Link"), __scope, false) })

  }

  trait DefaultParametersFormat extends scalaxb.ElemNameParser[Parameters] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Parameters] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Parameter")) ^^
      { case p1 =>
      Parameters(p1.toSeq map { scalaxb.fromXML[Parameter](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Parameters, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Parameter flatMap { scalaxb.toXML[Parameter](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Parameter"), __scope, false) })

  }

  trait DefaultParameterFormat extends scalaxb.XMLFormat[Parameter] with scalaxb.CanWriteChildNodes[Parameter] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Parameter] = seq match {
      case node: scala.xml.Node => Right(Parameter(scalaxb.fromXML[String]((node \ "@key"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      attr
    }

    def writesChildNodes(__obj: Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultLinkFormat extends scalaxb.ElemNameParser[Link] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    override def typeName: Option[String] = Some("Link")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Link] =
      phrase(optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Parameters")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Parameters](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      Link(Seq.concat(p1.toList,
        p2.toList,
        p3.toList),
        (node \ "@href").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@rel"), scalaxb.ElemName(node) :: stack),
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
      attr = scala.xml.Attribute(null, "rel", __obj.rel.toString, attr)
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultProductTypeFormat extends scalaxb.ElemNameParser[ProductType] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ProductType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Description")) ^^
      { case p1 =>
      ProductType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@code"), scalaxb.ElemName(node) :: stack),
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ProductType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "code", __obj.code.toString, attr)
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: ProductType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Description map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultRoleFormat extends scalaxb.ElemNameParser[Role] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Role] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Description")) ^^
      { case p1 =>
      Role(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}roleId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Role, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.croleId foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "roleId", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Role, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Description map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultValuationFormatFormat extends scalaxb.ElemNameParser[ValuationFormat] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValuationFormat] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Description")) ^^
      { case p1 =>
      ValuationFormat(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ValuationFormat, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: ValuationFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Description map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultInvestmentObjectiveFormat extends scalaxb.ElemNameParser[InvestmentObjective] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InvestmentObjective] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Description")) ^^
      { case p1 =>
      InvestmentObjective(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@code").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: InvestmentObjective, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.code foreach { x => attr = scala.xml.Attribute(null, "code", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: InvestmentObjective, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Description map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultInstrumentHeadingFormat extends scalaxb.XMLFormat[InstrumentHeading] with scalaxb.CanWriteChildNodes[InstrumentHeading] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, InstrumentHeading] = seq match {
      case node: scala.xml.Node => Right(InstrumentHeading((node \ "@{http://schemas.jhc.co.uk/domain/common}sedol").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}isin").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}symbol").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}longName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}market").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}securityType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@country").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@abbreviation").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: InstrumentHeading, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.csedol foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "sedol", x.toString, attr) }
      __obj.cisin foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "isin", x.toString, attr) }
      __obj.csymbol foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "symbol", x.toString, attr) }
      __obj.cname foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "name", x.toString, attr) }
      __obj.clongName foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "longName", x.toString, attr) }
      __obj.cmarket foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "market", x.toString, attr) }
      __obj.csecurityType foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "securityType", x.toString, attr) }
      __obj.country foreach { x => attr = scala.xml.Attribute(null, "country", x.toString, attr) }
      __obj.abbreviation foreach { x => attr = scala.xml.Attribute(null, "abbreviation", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: InstrumentHeading, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultPriceFormat extends scalaxb.XMLFormat[Price] with scalaxb.CanWriteChildNodes[Price] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Price] = seq match {
      case node: scala.xml.Node => Right(Price((node \ "@{http://schemas.jhc.co.uk/domain/common}bid").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}mid").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}ask").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: Price, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.cbid foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "bid", x.toString, attr) }
      __obj.cmid foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "mid", x.toString, attr) }
      __obj.cask foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "ask", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Price, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultDeliveryTypeFormat extends scalaxb.XMLFormat[DeliveryType] with scalaxb.CanWriteChildNodes[DeliveryType] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DeliveryType] = seq match {
      case node: scala.xml.Node => Right(DeliveryType((node \ "@inBox").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@email").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sms").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: DeliveryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.inBox foreach { x => attr = scala.xml.Attribute(null, "inBox", x.toString, attr) }
      __obj.email foreach { x => attr = scala.xml.Attribute(null, "email", x.toString, attr) }
      __obj.sms foreach { x => attr = scala.xml.Attribute(null, "sms", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: DeliveryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultErrorFormat extends scalaxb.ElemNameParser[Error] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Error] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Message")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Info")) ^^
      { case p1 ~ p2 =>
      Error(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@httpCode").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@jhcCode").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Error, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.httpCode foreach { x => attr = scala.xml.Attribute(null, "httpCode", x.toString, attr) }
      __obj.jhcCode foreach { x => attr = scala.xml.Attribute(null, "jhcCode", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Error, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Message map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Message"), __scope, false) } getOrElse {Nil},
        __obj.Info map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Info"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultErrorsFormat extends scalaxb.ElemNameParser[Errors] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/common")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Errors] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Error")) ^^
      { case p1 =>
      Errors(p1.toSeq map { scalaxb.fromXML[Error](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Errors, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Error flatMap { scalaxb.toXML[Error](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Error"), __scope, false) })

  }

  trait DefaultCompanyFormat extends scalaxb.ElemNameParser[Company] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/company")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Company] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ^^
      { case p1 =>
      Company(p1.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@uecode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@registrationNumber").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@country").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Company, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.uecode foreach { x => attr = scala.xml.Attribute(null, "uecode", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.registrationNumber foreach { x => attr = scala.xml.Attribute(null, "registrationNumber", x.toString, attr) }
      __obj.country foreach { x => attr = scala.xml.Attribute(null, "country", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Company, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCompanyRelationshipFormat extends scalaxb.ElemNameParser[CompanyRelationship] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/company")
    
    override def typeName: Option[String] = Some("CompanyRelationship")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompanyRelationship] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/company"), "Company")) ^^
      { case p1 =>
      CompanyRelationship(scalaxb.fromXML[Company](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@{http://schemas.jhc.co.uk/domain/common}roleId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CompanyRelationship, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.croleId foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "roleId", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CompanyRelationship, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Company](__obj.Company, Some("http://schemas.jhc.co.uk/domain/company"), Some("Company"), __scope, false))

  }

  trait DefaultCompanyRelationshipsFormat extends scalaxb.ElemNameParser[CompanyRelationships] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/company")
    
    override def typeName: Option[String] = Some("CompanyRelationships")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CompanyRelationships] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/company"), "CompanyRelationship")) ^^
      { case p1 =>
      CompanyRelationships(p1.toSeq map { scalaxb.fromXML[CompanyRelationship](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: CompanyRelationships, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CompanyRelationship flatMap { scalaxb.toXML[CompanyRelationship](_, Some("http://schemas.jhc.co.uk/domain/company"), Some("CompanyRelationship"), __scope, false) })

  }

  trait DefaultCorporateActionsFormat extends scalaxb.ElemNameParser[CorporateActions] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateActions] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateAction")) ^^
      { case p1 =>
      CorporateActions(scalaxb.fromXML[CorporateAction](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: CorporateActions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[CorporateAction](__obj.CorporateAction, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateAction"), __scope, false))

  }

  trait DefaultCorporateActionFormat extends scalaxb.ElemNameParser[CorporateAction] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateAction] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateActionEvents")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/valuation"), "Holding")) ^^
      { case p1 ~ p2 =>
      CorporateAction(scalaxb.fromXML[CorporateActionEvents](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Holding](p2, scalaxb.ElemName(node) :: stack),
        (node \ "@startDate").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@currency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@urn").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@status").headOption map { scalaxb.fromXML[Status](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CorporateAction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.startDate foreach { x => attr = scala.xml.Attribute(null, "startDate", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      __obj.currency foreach { x => attr = scala.xml.Attribute(null, "currency", x.toString, attr) }
      __obj.urn foreach { x => attr = scala.xml.Attribute(null, "urn", x.toString, attr) }
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CorporateAction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[CorporateActionEvents](__obj.CorporateActionEvents, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateActionEvents"), __scope, false),
        scalaxb.toXML[Holding](__obj.Holding, Some("http://schemas.jhc.co.uk/domain/valuation"), Some("Holding"), __scope, false))

  }

  trait DefaultCorporateActionActivityFormat extends scalaxb.XMLFormat[CorporateActionActivity] with scalaxb.CanWriteChildNodes[CorporateActionActivity] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CorporateActionActivity] = seq match {
      case node: scala.xml.Node => Right(CorporateActionActivity((node \ "@oldUnits").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@actionType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@newUnits").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@price").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@resultCurrency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@unknownOutturns").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@result").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@actionDescription").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: CorporateActionActivity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.oldUnits foreach { x => attr = scala.xml.Attribute(null, "oldUnits", x.toString, attr) }
      __obj.actionType foreach { x => attr = scala.xml.Attribute(null, "actionType", x.toString, attr) }
      __obj.newUnits foreach { x => attr = scala.xml.Attribute(null, "newUnits", x.toString, attr) }
      __obj.price foreach { x => attr = scala.xml.Attribute(null, "price", x.toString, attr) }
      __obj.resultCurrency foreach { x => attr = scala.xml.Attribute(null, "resultCurrency", x.toString, attr) }
      __obj.unknownOutturns foreach { x => attr = scala.xml.Attribute(null, "unknownOutturns", x.toString, attr) }
      __obj.result foreach { x => attr = scala.xml.Attribute(null, "result", x.toString, attr) }
      __obj.actionDescription foreach { x => attr = scala.xml.Attribute(null, "actionDescription", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CorporateActionActivity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultCorporateActionActivitiesFormat extends scalaxb.ElemNameParser[CorporateActionActivities] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateActionActivities] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateActionActivity")) ^^
      { case p1 =>
      CorporateActionActivities(scalaxb.fromXML[CorporateActionActivity](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: CorporateActionActivities, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[CorporateActionActivity](__obj.CorporateActionActivity, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateActionActivity"), __scope, false))

  }

  trait DefaultCorporateActionEventFormat extends scalaxb.ElemNameParser[CorporateActionEvent] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateActionEvent] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CAEventID")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateActionEventDetails")) ^^
      { case p1 ~ p2 =>
      CorporateActionEvent(scalaxb.fromXML[CAEventID](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CorporateActionEventDetails](p2, scalaxb.ElemName(node) :: stack),
        (node \ "@optional").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@eventType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@responseDue").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@bookCloseDate").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cashDueCurrency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cashDue").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: CorporateActionEvent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.optional foreach { x => attr = scala.xml.Attribute(null, "optional", x.toString, attr) }
      __obj.eventType foreach { x => attr = scala.xml.Attribute(null, "eventType", x.toString, attr) }
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      __obj.responseDue foreach { x => attr = scala.xml.Attribute(null, "responseDue", x.toString, attr) }
      __obj.bookCloseDate foreach { x => attr = scala.xml.Attribute(null, "bookCloseDate", x.toString, attr) }
      __obj.cashDueCurrency foreach { x => attr = scala.xml.Attribute(null, "cashDueCurrency", x.toString, attr) }
      __obj.cashDue foreach { x => attr = scala.xml.Attribute(null, "cashDue", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CorporateActionEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[CAEventID](__obj.CAEventID, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CAEventID"), __scope, false),
        scalaxb.toXML[CorporateActionEventDetails](__obj.CorporateActionEventDetails, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateActionEventDetails"), __scope, false))

  }

  trait DefaultCorporateActionEventsFormat extends scalaxb.ElemNameParser[CorporateActionEvents] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateActionEvents] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateActionEvent")) ^^
      { case p1 =>
      CorporateActionEvents(scalaxb.fromXML[CorporateActionEvent](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: CorporateActionEvents, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[CorporateActionEvent](__obj.CorporateActionEvent, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateActionEvent"), __scope, false))

  }

  trait DefaultCAEventIDFormat extends scalaxb.XMLFormat[CAEventID] with scalaxb.CanWriteChildNodes[CAEventID] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CAEventID] = seq match {
      case node: scala.xml.Node => Right(CAEventID((node \ "@urn").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sequence").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: CAEventID, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.urn foreach { x => attr = scala.xml.Attribute(null, "urn", x.toString, attr) }
      __obj.sequence foreach { x => attr = scala.xml.Attribute(null, "sequence", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CAEventID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildStatusFormat = new DefaultStatusFormat {}
  trait DefaultStatusFormat extends scalaxb.XMLFormat[Status] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Status] = seq match {
      case elem: scala.xml.Elem => Right(Status.fromString(elem.text, elem.scope))
      case _ => Right(Status.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: Status, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultDividentDetailsFormat extends scalaxb.ElemNameParser[DividentDetails] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DividentDetails] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "UnisTrustDetails")) ^^
      { case p1 =>
      DividentDetails(scalaxb.fromXML[UnisTrustDetails](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@dividentType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@posted").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@payRate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@paymentMarket").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@taxMarket").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@agentChargesMarket").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@agentChargesClient").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@marketClientRate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@paymentClient").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@taxClient").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: DividentDetails, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.dividentType foreach { x => attr = scala.xml.Attribute(null, "dividentType", x.toString, attr) }
      __obj.posted foreach { x => attr = scala.xml.Attribute(null, "posted", x.toString, attr) }
      __obj.payRate foreach { x => attr = scala.xml.Attribute(null, "payRate", x.toString, attr) }
      __obj.paymentMarket foreach { x => attr = scala.xml.Attribute(null, "paymentMarket", x.toString, attr) }
      __obj.taxMarket foreach { x => attr = scala.xml.Attribute(null, "taxMarket", x.toString, attr) }
      __obj.agentChargesMarket foreach { x => attr = scala.xml.Attribute(null, "agentChargesMarket", x.toString, attr) }
      __obj.agentChargesClient foreach { x => attr = scala.xml.Attribute(null, "agentChargesClient", x.toString, attr) }
      __obj.marketClientRate foreach { x => attr = scala.xml.Attribute(null, "marketClientRate", x.toString, attr) }
      __obj.paymentClient foreach { x => attr = scala.xml.Attribute(null, "paymentClient", x.toString, attr) }
      __obj.taxClient foreach { x => attr = scala.xml.Attribute(null, "taxClient", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: DividentDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[UnisTrustDetails](__obj.UnisTrustDetails, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("UnisTrustDetails"), __scope, false))

  }

  trait DefaultUnisTrustDetailsFormat extends scalaxb.XMLFormat[UnisTrustDetails] with scalaxb.CanWriteChildNodes[UnisTrustDetails] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, UnisTrustDetails] = seq match {
      case node: scala.xml.Node => Right(UnisTrustDetails((node \ "@groupOnePayRate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupOnePayment").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupOneTax").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupTwoPayRate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupTwoEqualisationRate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupTwoPayment").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupTwoTax").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupTwoEqualisation").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: UnisTrustDetails, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.groupOnePayRate foreach { x => attr = scala.xml.Attribute(null, "groupOnePayRate", x.toString, attr) }
      __obj.groupOnePayment foreach { x => attr = scala.xml.Attribute(null, "groupOnePayment", x.toString, attr) }
      __obj.groupOneTax foreach { x => attr = scala.xml.Attribute(null, "groupOneTax", x.toString, attr) }
      __obj.groupTwoPayRate foreach { x => attr = scala.xml.Attribute(null, "groupTwoPayRate", x.toString, attr) }
      __obj.groupTwoEqualisationRate foreach { x => attr = scala.xml.Attribute(null, "groupTwoEqualisationRate", x.toString, attr) }
      __obj.groupTwoPayment foreach { x => attr = scala.xml.Attribute(null, "groupTwoPayment", x.toString, attr) }
      __obj.groupTwoTax foreach { x => attr = scala.xml.Attribute(null, "groupTwoTax", x.toString, attr) }
      __obj.groupTwoEqualisation foreach { x => attr = scala.xml.Attribute(null, "groupTwoEqualisation", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: UnisTrustDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultUnitTrustGroupFormat extends scalaxb.XMLFormat[UnitTrustGroup] with scalaxb.CanWriteChildNodes[UnitTrustGroup] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, UnitTrustGroup] = seq match {
      case node: scala.xml.Node => Right(UnitTrustGroup((node \ "@payRate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@payment").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@tax").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@groupType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: UnitTrustGroup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.payRate foreach { x => attr = scala.xml.Attribute(null, "payRate", x.toString, attr) }
      __obj.payment foreach { x => attr = scala.xml.Attribute(null, "payment", x.toString, attr) }
      __obj.tax foreach { x => attr = scala.xml.Attribute(null, "tax", x.toString, attr) }
      __obj.groupType foreach { x => attr = scala.xml.Attribute(null, "groupType", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: UnitTrustGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultEventNotesFormat extends scalaxb.XMLFormat[EventNotes] with scalaxb.CanWriteChildNodes[EventNotes] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, EventNotes] = seq match {
      case node: scala.xml.Node => Right(EventNotes((node \ "@notes").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: EventNotes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.notes foreach { x => attr = scala.xml.Attribute(null, "notes", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: EventNotes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultCorporateActionOptionsFormat extends scalaxb.ElemNameParser[CorporateActionOptions] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateActionOptions] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateActionOption")) ^^
      { case p1 =>
      CorporateActionOptions(scalaxb.fromXML[CorporateActionOption](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: CorporateActionOptions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[CorporateActionOption](__obj.CorporateActionOption, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateActionOption"), __scope, false))

  }

  trait DefaultCorporateActionOptionFormat extends scalaxb.XMLFormat[CorporateActionOption] with scalaxb.CanWriteChildNodes[CorporateActionOption] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CorporateActionOption] = seq match {
      case node: scala.xml.Node => Right(CorporateActionOption((node \ "@allocation").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@pricePerShare").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cashToPricePerShareRate").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@priceCurrency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cashDueCurrency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cashDue").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@optionNumber").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@depot").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@claim").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@crestAccount").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@crestMember").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: CorporateActionOption, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.allocation foreach { x => attr = scala.xml.Attribute(null, "allocation", x.toString, attr) }
      __obj.pricePerShare foreach { x => attr = scala.xml.Attribute(null, "pricePerShare", x.toString, attr) }
      __obj.cashToPricePerShareRate foreach { x => attr = scala.xml.Attribute(null, "cashToPricePerShareRate", x.toString, attr) }
      __obj.priceCurrency foreach { x => attr = scala.xml.Attribute(null, "priceCurrency", x.toString, attr) }
      __obj.cashDueCurrency foreach { x => attr = scala.xml.Attribute(null, "cashDueCurrency", x.toString, attr) }
      __obj.cashDue foreach { x => attr = scala.xml.Attribute(null, "cashDue", x.toString, attr) }
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      __obj.optionNumber foreach { x => attr = scala.xml.Attribute(null, "optionNumber", x.toString, attr) }
      __obj.depot foreach { x => attr = scala.xml.Attribute(null, "depot", x.toString, attr) }
      __obj.claim foreach { x => attr = scala.xml.Attribute(null, "claim", x.toString, attr) }
      __obj.crestAccount foreach { x => attr = scala.xml.Attribute(null, "crestAccount", x.toString, attr) }
      __obj.crestMember foreach { x => attr = scala.xml.Attribute(null, "crestMember", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: CorporateActionOption, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultCorporateActionEventDetailsFormat extends scalaxb.ElemNameParser[CorporateActionEventDetails] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/corporateaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CorporateActionEventDetails] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "DividentDetails")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CorporateActionOptions")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "EventNotes")) ^^
      { case p1 ~ p2 ~ p3 =>
      CorporateActionEventDetails(scalaxb.fromXML[DividentDetails](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CorporateActionOptions](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[EventNotes](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: CorporateActionEventDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[DividentDetails](__obj.DividentDetails, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("DividentDetails"), __scope, false),
        scalaxb.toXML[CorporateActionOptions](__obj.CorporateActionOptions, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CorporateActionOptions"), __scope, false),
        scalaxb.toXML[EventNotes](__obj.EventNotes, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("EventNotes"), __scope, false))

  }

  trait DefaultDecimalFormat extends scalaxb.XMLFormat[Decimal] with scalaxb.CanWriteChildNodes[Decimal] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/custom")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Decimal] = seq match {
      case node: scala.xml.Node => Right(Decimal((node \ "@msb").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lsb").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int]((node \ "@scale"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: Decimal, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.msb foreach { x => attr = scala.xml.Attribute(null, "msb", x.toString, attr) }
      __obj.lsb foreach { x => attr = scala.xml.Attribute(null, "lsb", x.toString, attr) }
      attr = scala.xml.Attribute(null, "scale", __obj.scale.toString, attr)
      attr
    }

    def writesChildNodes(__obj: Decimal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultFxRateFormat extends scalaxb.XMLFormat[FxRate] with scalaxb.CanWriteChildNodes[FxRate] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/fx")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FxRate] = seq match {
      case node: scala.xml.Node => Right(FxRate((node \ "@from").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@to").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@rate").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: FxRate, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.from foreach { x => attr = scala.xml.Attribute(null, "from", x.toString, attr) }
      __obj.to foreach { x => attr = scala.xml.Attribute(null, "to", x.toString, attr) }
      __obj.rate foreach { x => attr = scala.xml.Attribute(null, "rate", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: FxRate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultFxTableFormat extends scalaxb.ElemNameParser[FxTable] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/fx")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FxTable] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/fx"), "FxRate")) ^^
      { case p1 =>
      FxTable(p1.toSeq map { scalaxb.fromXML[FxRate](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@mode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: FxTable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.mode foreach { x => attr = scala.xml.Attribute(null, "mode", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: FxTable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.FxRate flatMap { scalaxb.toXML[FxRate](_, Some("http://schemas.jhc.co.uk/domain/fx"), Some("FxRate"), __scope, false) })

  }

  trait DefaultMiddleNamesFormat extends scalaxb.ElemNameParser[MiddleNames] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/individual")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MiddleNames] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Line")) ^^
      { case p1 =>
      MiddleNames(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: MiddleNames, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Line flatMap { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Line"), __scope, false) })

  }

  def buildMaritalStatusFormat = new DefaultMaritalStatusFormat {}
  trait DefaultMaritalStatusFormat extends scalaxb.XMLFormat[MaritalStatus] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/individual")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MaritalStatus] = seq match {
      case elem: scala.xml.Elem => Right(MaritalStatus.fromString(elem.text, elem.scope))
      case _ => Right(MaritalStatus.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: MaritalStatus, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultIndividualFormat extends scalaxb.ElemNameParser[Individual] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/individual")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Individual] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "EmailAddresses")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "MiddleNames")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Dob")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Dod")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Retired")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Residence")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Nationality")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Occupation")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Language")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "MaritalStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "PhoneNumbers")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Addresses")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "relatedAccounts")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "relatedCompanies")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Links")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      Individual(p1.headOption map { scalaxb.fromXML[EmailAddresses](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[MiddleNames](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Country](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Country](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[MaritalStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[PhoneNumbers](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Addresses](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[AccountRelationships](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[CompanyRelationships](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[Links](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@uecode"), scalaxb.ElemName(node) :: stack),
        (node \ "@forename").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@surname").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@username").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Individual, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "uecode", __obj.uecode.toString, attr)
      __obj.forename foreach { x => attr = scala.xml.Attribute(null, "forename", x.toString, attr) }
      __obj.surname foreach { x => attr = scala.xml.Attribute(null, "surname", x.toString, attr) }
      __obj.username foreach { x => attr = scala.xml.Attribute(null, "username", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Individual, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EmailAddresses map { scalaxb.toXML[EmailAddresses](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("EmailAddresses"), __scope, false) } getOrElse {Nil},
        __obj.Title map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Title"), __scope, false) } getOrElse {Nil},
        __obj.MiddleNames map { scalaxb.toXML[MiddleNames](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("MiddleNames"), __scope, false) } getOrElse {Nil},
        __obj.Dob map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Dob"), __scope, false) } getOrElse {Nil},
        __obj.Dod map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Dod"), __scope, false) } getOrElse {Nil},
        __obj.Retired map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Retired"), __scope, false) } getOrElse {Nil},
        __obj.Residence map { scalaxb.toXML[Country](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Residence"), __scope, false) } getOrElse {Nil},
        __obj.Nationality map { scalaxb.toXML[Country](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Nationality"), __scope, false) } getOrElse {Nil},
        __obj.Occupation map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Occupation"), __scope, false) } getOrElse {Nil},
        __obj.Language map { scalaxb.toXML[String](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Language"), __scope, false) } getOrElse {Nil},
        __obj.MaritalStatus map { scalaxb.toXML[MaritalStatus](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("MaritalStatus"), __scope, false) } getOrElse {Nil},
        __obj.PhoneNumbers map { scalaxb.toXML[PhoneNumbers](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("PhoneNumbers"), __scope, false) } getOrElse {Nil},
        __obj.Addresses map { scalaxb.toXML[Addresses](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Addresses"), __scope, false) } getOrElse {Nil},
        __obj.relatedAccounts map { scalaxb.toXML[AccountRelationships](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("relatedAccounts"), __scope, false) } getOrElse {Nil},
        __obj.relatedCompanies map { scalaxb.toXML[CompanyRelationships](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("relatedCompanies"), __scope, false) } getOrElse {Nil},
        __obj.Links map { scalaxb.toXML[Links](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Links"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultIndividualsFormat extends scalaxb.ElemNameParser[Individuals] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/individual")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Individuals] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Individual")) ^^
      { case p1 =>
      Individuals(p1.toSeq map { scalaxb.fromXML[Individual](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Individuals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Individual flatMap { scalaxb.toXML[Individual](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Individual"), __scope, false) })

  }

  trait DefaultIndividualRelationshipFormat extends scalaxb.ElemNameParser[IndividualRelationship] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/individual")
    
    override def typeName: Option[String] = Some("IndividualRelationship")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IndividualRelationship] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "Individual")) ^^
      { case p1 =>
      IndividualRelationship(scalaxb.fromXML[Individual](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@{http://schemas.jhc.co.uk/domain/common}roleId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: IndividualRelationship, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.croleId foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "roleId", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: IndividualRelationship, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Individual](__obj.Individual, Some("http://schemas.jhc.co.uk/domain/individual"), Some("Individual"), __scope, false))

  }

  trait DefaultIndividualRelationshipsFormat extends scalaxb.ElemNameParser[IndividualRelationships] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/individual")
    
    override def typeName: Option[String] = Some("IndividualRelationships")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IndividualRelationships] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/individual"), "IndividualRelationship")) ^^
      { case p1 =>
      IndividualRelationships(p1.toSeq map { scalaxb.fromXML[IndividualRelationship](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: IndividualRelationships, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.IndividualRelationship flatMap { scalaxb.toXML[IndividualRelationship](_, Some("http://schemas.jhc.co.uk/domain/individual"), Some("IndividualRelationship"), __scope, false) })

  }

  trait DefaultInstrumentClassificationFormat extends scalaxb.XMLFormat[InstrumentClassification] with scalaxb.CanWriteChildNodes[InstrumentClassification] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/instrument")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, InstrumentClassification] = seq match {
      case node: scala.xml.Node => Right(InstrumentClassification((node \ "@sector").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@nationalityDeclaration").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@industrialClassificationCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@marketSegment").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: InstrumentClassification, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.sector foreach { x => attr = scala.xml.Attribute(null, "sector", x.toString, attr) }
      __obj.nationalityDeclaration foreach { x => attr = scala.xml.Attribute(null, "nationalityDeclaration", x.toString, attr) }
      __obj.industrialClassificationCode foreach { x => attr = scala.xml.Attribute(null, "industrialClassificationCode", x.toString, attr) }
      __obj.marketSegment foreach { x => attr = scala.xml.Attribute(null, "marketSegment", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: InstrumentClassification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultInstrumentApplicabilityFormat extends scalaxb.XMLFormat[InstrumentApplicability] with scalaxb.CanWriteChildNodes[InstrumentApplicability] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/instrument")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, InstrumentApplicability] = seq match {
      case node: scala.xml.Node => Right(InstrumentApplicability((node \ "@trading").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isaTrading").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sippTrading").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@rspTrading").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: InstrumentApplicability, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.trading foreach { x => attr = scala.xml.Attribute(null, "trading", x.toString, attr) }
      __obj.isaTrading foreach { x => attr = scala.xml.Attribute(null, "isaTrading", x.toString, attr) }
      __obj.sippTrading foreach { x => attr = scala.xml.Attribute(null, "sippTrading", x.toString, attr) }
      __obj.rspTrading foreach { x => attr = scala.xml.Attribute(null, "rspTrading", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: InstrumentApplicability, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultInstrumentPropertiesFormat extends scalaxb.XMLFormat[InstrumentProperties] with scalaxb.CanWriteChildNodes[InstrumentProperties] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/instrument")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, InstrumentProperties] = seq match {
      case node: scala.xml.Node => Right(InstrumentProperties((node \ "@countryOfIncorporation").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@issuerName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@securityDescription").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@numberOfTrades").headOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: InstrumentProperties, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.countryOfIncorporation foreach { x => attr = scala.xml.Attribute(null, "countryOfIncorporation", x.toString, attr) }
      __obj.issuerName foreach { x => attr = scala.xml.Attribute(null, "issuerName", x.toString, attr) }
      __obj.securityDescription foreach { x => attr = scala.xml.Attribute(null, "securityDescription", x.toString, attr) }
      __obj.numberOfTrades foreach { x => attr = scala.xml.Attribute(null, "numberOfTrades", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: InstrumentProperties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultInstrumentFormat extends scalaxb.ElemNameParser[Instrument] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/instrument")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Instrument] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "InstrumentHeading")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/instrument"), "InstrumentClassification")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/instrument"), "InstrumentApplicability")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/instrument"), "InstrumentProperties")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      Instrument(p1.headOption map { scalaxb.fromXML[InstrumentHeading](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[InstrumentClassification](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[InstrumentApplicability](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[InstrumentProperties](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Instrument, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.InstrumentHeading map { scalaxb.toXML[InstrumentHeading](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("InstrumentHeading"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentClassification map { scalaxb.toXML[InstrumentClassification](_, Some("http://schemas.jhc.co.uk/domain/instrument"), Some("InstrumentClassification"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentApplicability map { scalaxb.toXML[InstrumentApplicability](_, Some("http://schemas.jhc.co.uk/domain/instrument"), Some("InstrumentApplicability"), __scope, false) } getOrElse {Nil},
        __obj.InstrumentProperties map { scalaxb.toXML[InstrumentProperties](_, Some("http://schemas.jhc.co.uk/domain/instrument"), Some("InstrumentProperties"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultInstrumentsFormat extends scalaxb.ElemNameParser[Instruments] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/instrument")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Instruments] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/instrument"), "Instrument")) ^^
      { case p1 =>
      Instruments(p1.toSeq map { scalaxb.fromXML[Instrument](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Instruments, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Instrument flatMap { scalaxb.toXML[Instrument](_, Some("http://schemas.jhc.co.uk/domain/instrument"), Some("Instrument"), __scope, false) })

  }

  trait DefaultContainerFormat extends scalaxb.XMLFormat[Container] with scalaxb.CanWriteChildNodes[Container] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/internal")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Container] = seq match {
      case node: scala.xml.Node => Right(Container(scalaxb.fromXML[String]((node \ "@objectType"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.Base64Binary]((node \ "@containedObject"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: Container, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "objectType", __obj.objectType.toString, attr)
      attr = scala.xml.Attribute(null, "containedObject", __obj.containedObject.toString, attr)
      attr
    }

    def writesChildNodes(__obj: Container, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultApiMessageFormat extends scalaxb.ElemNameParser[ApiMessage] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/internal")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ApiMessage] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "Parameters")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/internal"), "Body")) ^^
      { case p1 ~ p2 =>
      ApiMessage(p1.headOption map { scalaxb.fromXML[Parameters](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Container](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@method").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@path").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@requestId").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@person").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@status").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ApiMessage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.method foreach { x => attr = scala.xml.Attribute(null, "method", x.toString, attr) }
      __obj.path foreach { x => attr = scala.xml.Attribute(null, "path", x.toString, attr) }
      __obj.requestId foreach { x => attr = scala.xml.Attribute(null, "requestId", x.toString, attr) }
      __obj.person foreach { x => attr = scala.xml.Attribute(null, "person", x.toString, attr) }
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: ApiMessage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Parameters map { scalaxb.toXML[Parameters](_, Some("http://schemas.jhc.co.uk/domain/common"), Some("Parameters"), __scope, false) } getOrElse {Nil},
        __obj.Body map { scalaxb.toXML[Container](_, Some("http://schemas.jhc.co.uk/domain/internal"), Some("Body"), __scope, false) } getOrElse {Nil})

  }

  def buildBoSFormat = new DefaultBoSFormat {}
  trait DefaultBoSFormat extends scalaxb.XMLFormat[BoS] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/statement")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, BoS] = seq match {
      case elem: scala.xml.Elem => Right(BoS.fromString(elem.text, elem.scope))
      case _ => Right(BoS.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: BoS, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStatementEntryFormat extends scalaxb.ElemNameParser[StatementEntry] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/statement")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StatementEntry] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CAEventID")) ^^
      { case p1 =>
      StatementEntry(scalaxb.fromXML[CAEventID](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@batchType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@contractReference").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}currency").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dateEntered").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@settlementDate").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@description").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@runningBalance").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@itemValue").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@credit").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@debit").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isaProduct").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@isaComponent").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@bos").headOption map { scalaxb.fromXML[BoS](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@symbol").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}market").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@{http://schemas.jhc.co.uk/domain/common}price").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@qty").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@instrumentName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: StatementEntry, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.batchType foreach { x => attr = scala.xml.Attribute(null, "batchType", x.toString, attr) }
      __obj.contractReference foreach { x => attr = scala.xml.Attribute(null, "contractReference", x.toString, attr) }
      __obj.ccurrency foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "currency", x.toString, attr) }
      __obj.dateEntered foreach { x => attr = scala.xml.Attribute(null, "dateEntered", x.toString, attr) }
      __obj.settlementDate foreach { x => attr = scala.xml.Attribute(null, "settlementDate", x.toString, attr) }
      __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
      __obj.runningBalance foreach { x => attr = scala.xml.Attribute(null, "runningBalance", x.toString, attr) }
      __obj.itemValue foreach { x => attr = scala.xml.Attribute(null, "itemValue", x.toString, attr) }
      __obj.credit foreach { x => attr = scala.xml.Attribute(null, "credit", x.toString, attr) }
      __obj.debit foreach { x => attr = scala.xml.Attribute(null, "debit", x.toString, attr) }
      __obj.isaProduct foreach { x => attr = scala.xml.Attribute(null, "isaProduct", x.toString, attr) }
      __obj.isaComponent foreach { x => attr = scala.xml.Attribute(null, "isaComponent", x.toString, attr) }
      __obj.bos foreach { x => attr = scala.xml.Attribute(null, "bos", x.toString, attr) }
      __obj.symbol foreach { x => attr = scala.xml.Attribute(null, "symbol", x.toString, attr) }
      __obj.cmarket foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "market", x.toString, attr) }
      __obj.cprice foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("http://schemas.jhc.co.uk/domain/common"), "price", x.toString, attr) }
      __obj.qty foreach { x => attr = scala.xml.Attribute(null, "qty", x.toString, attr) }
      __obj.instrumentName foreach { x => attr = scala.xml.Attribute(null, "instrumentName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: StatementEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[CAEventID](__obj.CAEventID, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CAEventID"), __scope, false))

  }

  trait DefaultStatementFormat extends scalaxb.ElemNameParser[Statement] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/statement")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Statement] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/statement"), "StatementEntry")) ^^
      { case p1 =>
      Statement(p1.toSeq map { scalaxb.fromXML[StatementEntry](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Statement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.StatementEntry flatMap { scalaxb.toXML[StatementEntry](_, Some("http://schemas.jhc.co.uk/domain/statement"), Some("StatementEntry"), __scope, false) })

  }

  trait DefaultTransactionTypeFormat extends scalaxb.XMLFormat[TransactionType] with scalaxb.CanWriteChildNodes[TransactionType] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/transaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TransactionType] = seq match {
      case node: scala.xml.Node => Right(TransactionType((node \ "@transactionCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: TransactionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.transactionCode foreach { x => attr = scala.xml.Attribute(null, "transactionCode", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: TransactionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultTransactionFormat extends scalaxb.ElemNameParser[Transaction] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/transaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Transaction] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/transaction"), "TransactionType")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/transaction"), "TransactionSourceId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/common"), "InstrumentHeading")) ^^
      { case p1 ~ p2 ~ p3 =>
      Transaction(scalaxb.fromXML[TransactionType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[TransactionSourceId](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[InstrumentHeading](p3, scalaxb.ElemName(node) :: stack),
        (node \ "@transactionDate").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@reference").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@quantity").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@value").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Transaction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.transactionDate foreach { x => attr = scala.xml.Attribute(null, "transactionDate", x.toString, attr) }
      __obj.reference foreach { x => attr = scala.xml.Attribute(null, "reference", x.toString, attr) }
      __obj.quantity foreach { x => attr = scala.xml.Attribute(null, "quantity", x.toString, attr) }
      __obj.valueAttribute foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Transaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[TransactionType](__obj.TransactionType, Some("http://schemas.jhc.co.uk/domain/transaction"), Some("TransactionType"), __scope, false),
        scalaxb.toXML[TransactionSourceId](__obj.TransactionSourceId, Some("http://schemas.jhc.co.uk/domain/transaction"), Some("TransactionSourceId"), __scope, false),
        scalaxb.toXML[InstrumentHeading](__obj.InstrumentHeading, Some("http://schemas.jhc.co.uk/domain/common"), Some("InstrumentHeading"), __scope, false))

  }

  trait DefaultContractIdFormat extends scalaxb.XMLFormat[ContractId] with scalaxb.CanWriteChildNodes[ContractId] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/transaction")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ContractId] = seq match {
      case node: scala.xml.Node => Right(ContractId((node \ "@broker").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@contractReference").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@year").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ContractId, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.broker foreach { x => attr = scala.xml.Attribute(null, "broker", x.toString, attr) }
      __obj.contractReference foreach { x => attr = scala.xml.Attribute(null, "contractReference", x.toString, attr) }
      __obj.year foreach { x => attr = scala.xml.Attribute(null, "year", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: ContractId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultTransactionSourceIdFormat extends scalaxb.ElemNameParser[TransactionSourceId] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/transaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TransactionSourceId] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/transaction"), "ContractId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/corporateaction"), "CAEventID")) ^^
      { case p1 ~ p2 =>
      TransactionSourceId(scalaxb.fromXML[ContractId](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CAEventID](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: TransactionSourceId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ContractId](__obj.ContractId, Some("http://schemas.jhc.co.uk/domain/transaction"), Some("ContractId"), __scope, false),
        scalaxb.toXML[CAEventID](__obj.CAEventID, Some("http://schemas.jhc.co.uk/domain/corporateaction"), Some("CAEventID"), __scope, false))

  }

  trait DefaultTransactionsFormat extends scalaxb.ElemNameParser[Transactions] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/transaction")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Transactions] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/transaction"), "Transaction")) ^^
      { case p1 =>
      Transactions(p1.toSeq map { scalaxb.fromXML[Transaction](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Transactions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Transaction flatMap { scalaxb.toXML[Transaction](_, Some("http://schemas.jhc.co.uk/domain/transaction"), Some("Transaction"), __scope, false) })

  }

  trait DefaultHoldingFormat extends scalaxb.ElemNameParser[Holding] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/valuation")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Holding] =
      phrase((scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/instrument"), "Instrument")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/valuation"), "BookCost")) ~ 
      (scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/valuation"), "Value")) ^^
      { case p1 ~ p2 ~ p3 =>
      Holding(scalaxb.fromXML[Instrument](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CashValue](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[CashValue](p3, scalaxb.ElemName(node) :: stack),
        (node \ "@quantity").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: Holding, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.quantity foreach { x => attr = scala.xml.Attribute(null, "quantity", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: Holding, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Instrument](__obj.Instrument, Some("http://schemas.jhc.co.uk/domain/instrument"), Some("Instrument"), __scope, false),
        scalaxb.toXML[CashValue](__obj.BookCost, Some("http://schemas.jhc.co.uk/domain/valuation"), Some("BookCost"), __scope, false),
        scalaxb.toXML[CashValue](__obj.Value, Some("http://schemas.jhc.co.uk/domain/valuation"), Some("Value"), __scope, false))

  }

  trait DefaultHoldingsFormat extends scalaxb.ElemNameParser[Holdings] {
    val targetNamespace: Option[String] = Some("http://schemas.jhc.co.uk/domain/valuation")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Holdings] =
      phrase(rep(scalaxb.ElemName(Some("http://schemas.jhc.co.uk/domain/valuation"), "Holding")) ^^
      { case p1 =>
      Holdings(p1.toSeq map { scalaxb.fromXML[Holding](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: Holdings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Holding flatMap { scalaxb.toXML[Holding](_, Some("http://schemas.jhc.co.uk/domain/valuation"), Some("Holding"), __scope, false) })

  }


}

